'''
define inspect function that will parse message
from source and decide whether to send response

this starting definition is not sufficient for the firewall 
defense and needs to be improved as part of this project
'''

# Command to run from my terminal
# python repy.py network-firewall/restrictions.test network-firewall/defend_start.r2py 

def inspect(ip, unused, sock, actionlog):

  # save received message
  message = sock.recv(512)
  
  # default action
  action = "DROP"

  ########   MODIFY FIREWALL DEFENSE RULES HERE    ########

  # define trusted
  trusted = {
    'ap': ('HT','GL'),
    'ports' : ('20001', '28724', '39845'),
    'ips':  (''.join('127.0.0.{}:'.format(x) for x in range(0,13)).split(':'))
  }
  
  #define semi-trusted

  #pretty ugly :(
  ips1 = ''.join('127.0.0.{x}:'.format(x) for x in range(13,256)).split(':')
  ips2 = ''.join('127.0.1.{x}:'.format(x) for x in range(256)).split(':')
  ips3 = ''.join('127.1.1.{x}:'.format(x) for x in range(256)).split(':')

  semi_trusted = {
    'ap': ('SR'),
    'ports' : ('49034'),
    'ips': ( ips1 + ips2 + ips3 )
  }

  # parse application protocol out of message  
  senderap = message[0:2]
  sender_port = message[2:7]

  # create boolean conditions 
  #trusted
  is_trusted_ap = senderap in trusted['ap']
  is_trusted_port = sender_port in trusted['ports']
  is_trusted_ip = ip in trusted['ips']

  #semi-trusted
  is_semi_trusted_ap = senderap in semi_trusted['ap']
  is_semi_trusted_port = sender_port in semi_trusted['ports']
  is_semi_trusted_ip = ip in semi_trusted['ips']
  
  #untrusted
  is_untrusted_ap = \
    (senderap not in trusted['ap']) or (senderap not in semi_trusted['ap'])

  # if the application is trusted, send back 'Accept' message
  if is_trusted_ap and is_trusted_port and is_trusted_ip:
    action = 'ACCEPT'
    sock.send('Accept')
  elif (is_trusted_ip and is_trusted_port and is_semi_trusted_ap) or \
        (is_trusted_ip and is_trusted_port and is_untrusted_ap) or \
        (is_semi_trusted_ip and is_trusted_port and is_trusted_ap) or \
        (is_trusted_ip and is_semi_trusted_port and is_trusted_ap):
    action = 'REJECT'
    sock.send('Reject')  
  else:
    action = 'DROP'
    sock.send('Drop')   

  ########    END MODIFY FIREWALL DEFENSE RULES    ########

  # write report to file
  report = ip + ' ' + message + ' ' + action + '\n'
  actionlog.writeat(report, mycontext['offset'])
  mycontext['offset'] += len(report)
  
  # close communication socket
  sock.close()

######## END OF INSPECT FUNCTION ###################

# "global" variable for offset in file writing
mycontext['offset'] = 0

# listen for connection requests coming in
server = listenforconnection('127.0.0.1', 12777)

####### MODIFY 3-DIGIT STUDENT CODE ASSIGNED #######
studentcode = "___"    # replace ___ with your 3-digit student code


filename = "firewalllog_" + studentcode         #no semicolons in python
actionlog = openfile(filename, True)

# keep checking for connection request
# if none received, wait and try again
while True:
  try:
    src_ip, unused, src_socket = server.getconnection()
    inspect(src_ip, unused, src_socket, actionlog)
  except SocketWouldBlockError:
    sleep(0.1)

# close file
actionlog.close()
