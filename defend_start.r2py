'''
define inspect function that will parse message
from source and decide whether to send response

this starting definition is not sufficient for the firewall 
defense and needs to be improved as part of this project
'''

# Command to run from my terminal
# repy.py network-firewall/restrictions.test network-firewall/defend_start.py 

def inspect(ip, unused, sock, actionlog):

  # save received message
  message = sock.recv(512)
  
  # default action
  action = "DROP"

  ########   MODIFY FIREWALL DEFENSE RULES HERE    ########
  
  # define trusted application protocols
  trustedaps = ['HT', 'GL']
  trusted_ports = ('20001', '28724', '39845')                 #trusted ports

  # parse application protocol out of message  
  senderap = message[0:2]
  sender_port = message[2:7]

  # if the application is trusted, send back 'Accept' message
  if senderap in trustedaps and sender_port in trusted_ports:
    action = 'ACCEPT'
    sock.send('Accept')

  # elif:  
  else:
    action = 'DROP'
    sock.send('Drop')   

  ########    END MODIFY FIREWALL DEFENSE RULES    ########

  # write report to file
  report = ip + ' ' + message + ' ' + action + '\n'
  actionlog.writeat(report, mycontext['offset'])
  mycontext['offset'] += len(report)
  
  # close communication socket
  sock.close()

######## END OF INSPECT FUNCTION ###################

# "global" variable for offset in file writing
mycontext['offset'] = 0

# listen for connection requests coming in
server = listenforconnection('127.0.0.1', 12777)

####### MODIFY 3-DIGIT STUDENT CODE ASSIGNED #######
studentcode = "___"    # replace ___ with your 3-digit student code

filename = "firewalllog_" + studentcode;
actionlog = openfile(filename, True)

# keep checking for connection request
# if none received, wait and try again
while True:
  try:
    src_ip, unused, src_socket = server.getconnection()
    inspect(src_ip, unused, src_socket, actionlog)
  except SocketWouldBlockError:
    sleep(0.1)

# close file
actionlog.close()
